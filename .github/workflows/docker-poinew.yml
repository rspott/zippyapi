name: POI docker push

defaults:
 run:
   shell: bash

on:
 workflow_dispatch:
 push:
   branches: [main]
   paths:
      - 'apis/poi/**'
 pull_request:
   branches: [main]
env:
  AZURE_RESOURCE_GROUP: openhackztk992u0rg  # target resource, must match the {resource-group-name} you setup in the pre-requisties
  WEB_APP_NAME: openhackztk992u0poi         # set the name for the Web App on Azure
  CONTAINER_IMAGE_NAME: api-poi # set the name for the container image
  #SQL_CONNECTION_STRING: ${{ secrets.SQL_CONNECTION_STRING }}  # connection string for the Azure SQL database -> must be in the secrets
  ACR_NAME: devopsoh               # set the name for the Azure Container Registry
  ACR_LOGIN_SERVER: openhackztk992u0acr.azurecr.io # fqdn for the Azure Container Registry
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }} # user name for accessing Azure Container Registry
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }} # password for accesing the Azure Container Registry
  
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['3.1.x']

    steps:
#       - run: echo ${{github.ref}}
#       - run: pwd
#       - uses: actions/checkout@v2
#       - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
#         uses: actions/setup-dotnet@v1.7.2
#         with:
#           dotnet-version: ${{ matrix.dotnet-version }}
#       - name: Install dependencies
#         run: dotnet restore apis/poi/poi.sln
#       - name: Build
#         run: dotnet build apis/poi/poi.sln
#       - name: Test
#         run: dotnet test apis/poi/tests/UnitTests
#       - name: Create Issue on failure
#         if: ${{ failure() }}
#         uses: dblock/create-a-github-issue@v3
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN }}
#         with:
#           filename: .github/ISSUE_TEMPLATE/bug_report.md
          
          
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Login to ACR
#         uses: docker/login-action@v1
#         with:
#           registry: ${{ env.ACR_LOGIN_SERVER }}
#           username: ${{ env.ACR_USERNAME }}
#           password: ${{ env.ACR_PASSWORD }}
#           logout: false
      
 
    
    
#       - run: docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{env.ACR_NAME}}/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }} --build-arg build_version=${{ github.run_id }} -f ./apis/poi/web/Dockerfile ./apis/poi/web 
#       - run: docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ env.ACR_USERNAME }} -p ${{ env.ACR_PASSWORD }}
#       - run: docker push ${{ env.ACR_LOGIN_SERVER }}/${{env.ACR_NAME}}/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }}
      
#       - uses: azure/webapps-deploy@v2
#         with:
#           app-name: ${{ env.WEB_APP_NAME }}
#           publish-profile: ${{ secrets.AZURE_WEBAPP_POI_STAGING_PUBLISH_PROFILE }}
#           images: ${{ env.ACR_LOGIN_SERVER }}/${{env.ACR_NAME}}/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }}
#           slot-name: staging
      
      - name: Get Health of Staging Env
        env:
            HEALTH_CHECK: $(curl -s --http2 -i https://openhackztk992u0poi-staging.azurewebsites.net/api/healthcheck/poi | tee >(grep -v "^{") | grep "^{" | jq -r '.status')
        run: |
          echo ${{env.HEALTH_CHECK}}
          if [ ${{env.HEALTH_CHECK}} = "Healthy" ]
          then
              echo "Healthy"
          else
              echo "Not Healthy"
              exit 1
          fi

#       - name: Get Health of Staging Env
#         env:
#           HEALTH_CHECK: $(curl -s --http2 -i https://openhackztk992u0poi-staging.azurewebsites.net/api/healthcheck/poi | tee >(grep -v "^{") | grep "^{" | jq -r '.status')
# #         if: env.HEALTH_CHECK != 'Healthy'
#         run: | 
#           echo ${{ env.HEALTH_CHECK }}
#           echo "Staging is Un Healthy"
#           exit 1

#       - if: ${{env.HEALTH_CHECK}} != 'Healthy'
#         run: | 
#           echo "Staging is Un Healthy"
#           exit 1
        
      - name: AZ LOGIN
        uses: Azure/login@v1.4.3
        with:
         creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: SWAP PR Deployment Slot
        uses: Azure/cli@v1
        with:
          inlineScript: >
            az webapp deployment slot swap --slot staging --target-slot production --resource-group openhackztk992u0rg --name openhackztk992u0poi
      

